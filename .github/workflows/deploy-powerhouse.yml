name: Deploy Powerhouse

on:
  workflow_call:
  workflow_dispatch:

env:
  HUSKY: 0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      deploy-env: ${{ steps.env.outputs.deploy-env }}
    steps:
      - name: Determine deployment environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == refs/heads/release/staging/* ]]; then
            echo "deploy-env=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/production/* ]]; then
            echo "deploy-env=production" >> $GITHUB_OUTPUT
          else
            echo "deploy-env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Show environment to deploy
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "deploy-env: ${{ steps.env.outputs.deploy-env }}"

  connect:
    needs: setup
    environment: ${{ needs.setup.outputs.deploy-env }}
    runs-on: ubuntu-latest
    steps:
      - name: Show environment to deploy
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "DEPLOY_ENV: ${{ needs.setup.outputs.deploy-env }}"

      - name: Checkout Connect Heroku config
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm with cache
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Install Powerhouse cli
        run: pnpm install -g ph-cmd@${{ vars.PH_TAG }}

      - name: Initialize new project
        run: |
          mkdir projects
          cd projects
          ph init connect-deploy --pnpm --${{ vars.PH_TAG }}

      - name: Install dependencies
        working-directory: ./projects/connect-deploy
        run: pnpm install --ignore-workspace

      - name: Install Powerhouse packages
        if: ${{ vars.PH_PACKAGES && vars.PH_PACKAGES != '' }}
        working-directory: ./projects/connect-deploy
        env:
          PH_PACKAGES: ${{ vars.PH_PACKAGES }}
        run: |
          set -euxo pipefail
          PKGS="${PH_PACKAGES//,/ }"
          echo "Installing Powerhouse packages: $PKGS"
          ph install $PKGS

      - name: Build Connect
        working-directory: ./projects/connect-deploy
        run: ph connect build
        env:
          PH_CONNECT_BASE_PATH: ${{ vars.CONNECT_BASE_PATH }}
          PH_PACKAGES: ${{ vars.PH_PACKAGES }}
          PH_CONNECT_SENTRY_DSN: ${{ secrets.CONNECT_SENTRY_DSN }}
          PH_CONNECT_SENTRY_ENV: ${{ needs.setup.outputs.deploy-env }}
          PH_CONNECT_SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          PH_CONNECT_SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          PH_CONNECT_SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

      - name: Prepare Heroku deployment
        run: |
          cp -r apps/connect/heroku/* projects/connect-deploy/.ph/connect-build/dist/

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.14.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ vars.HEROKU_APP_NAME_CONNECT }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          dontautocreate: true
          appdir: "projects/connect-deploy/.ph/connect-build/dist/"

  switchboard:
    needs: setup
    environment: ${{ needs.setup.outputs.deploy-env }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up heroku
        run: sudo curl https://cli-assets.heroku.com/install.sh | sh
      - name: Build, Push and Release API to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ vars.HEROKU_APP_NAME_SWITCHBOARD }}
          dockerfile_directory: ./apps/switchboard
          process_type: web
          docker_options: "--build-arg TAG=${{ vars.PH_TAG }}"
  academy:
    if: ${{ needs.setup.outputs.deploy-env == 'main' }}
    needs: setup
    environment: ${{ needs.setup.outputs.deploy-env }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up heroku
        run: sudo curl https://cli-assets.heroku.com/install.sh | sh
      - name: Build, Push and Release Academy to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ vars.HEROKU_APP_NAME_ACADEMY }}
          dockerfile_directory: ./apps/academy
          process_type: web
