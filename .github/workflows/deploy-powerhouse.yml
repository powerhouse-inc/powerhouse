name: Deploy Powerhouse

on:
  workflow_call:
  workflow_dispatch:

env:
  HUSKY: 0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      deploy-env: ${{ steps.env.outputs.deploy-env }}
    steps:
      - name: Determine deployment environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == refs/heads/release/staging/* ]]; then
            echo "deploy-env=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/production/* ]]; then
            echo "deploy-env=production" >> $GITHUB_OUTPUT
          else
            echo "deploy-env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Show environment to deploy
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "deploy-env: ${{ steps.env.outputs.deploy-env }}"

  connect:
    needs: setup
    environment: ${{ needs.setup.outputs.deploy-env }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up heroku
        run: sudo curl https://cli-assets.heroku.com/install.sh | sh
      - name: Build, Push and Release Connect to Heroku
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ vars.HEROKU_APP_NAME_CONNECT }}
          dockerfile_directory: ./apps/connect/heroku
          dockerfile_name: Dockerfile
          process_type: web
          docker_options: >-
            --build-arg TAG=${{ vars.PH_TAG }}
            --build-arg PH_PACKAGES=${{ vars.PH_PACKAGES }}
            --build-arg PH_CONNECT_BASE_PATH=${{ vars.CONNECT_BASE_PATH }}
            --build-arg PH_CONNECT_SENTRY_DSN=${{ secrets.CONNECT_SENTRY_DSN }}
            --build-arg PH_CONNECT_SENTRY_ENV=${{ needs.setup.outputs.deploy-env }}
            --build-arg PH_CONNECT_SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            --build-arg PH_CONNECT_SENTRY_ORG=${{ secrets.SENTRY_ORG }}
            --build-arg PH_CONNECT_SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}

  switchboard:
    needs: setup
    environment: ${{ needs.setup.outputs.deploy-env }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up heroku
        run: sudo curl https://cli-assets.heroku.com/install.sh | sh
      - name: Build, Push and Release API to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ vars.HEROKU_APP_NAME_SWITCHBOARD }}
          dockerfile_directory: ./apps/switchboard
          process_type: web
          docker_options: "--build-arg TAG=${{ vars.PH_TAG }}"
  academy:
    if: ${{ needs.setup.outputs.deploy-env == 'main' }}
    needs: setup
    environment: ${{ needs.setup.outputs.deploy-env }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up heroku
        run: sudo curl https://cli-assets.heroku.com/install.sh | sh
      - name: Build, Push and Release Academy to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ vars.HEROKU_APP_NAME_ACADEMY }}
          dockerfile_directory: ./apps/academy
          process_type: web
