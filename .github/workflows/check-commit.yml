name: Check Commit

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths-ignore:
      - "packages/document-drive/**"
  pull_request:
    branches: ["main"]
    types: [opened, synchronize]
    paths-ignore:
      - "packages/document-drive/**"

env:
  NX_ISOLATE_PLUGINS: false
  PNPM_VERSION: 9
  NODE_VERSION: 22

permissions:
  contents: read
  actions: read

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    outputs:
      cache-key: ${{ steps.set-cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Set cache key
        id: set-cache-key
        run: echo "key=${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}" >> "$GITHUB_OUTPUT"

      - name: Install Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ steps.set-cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Detect affected targets
        run: |
          echo "[]" > targets.json
          for target in build lint:nx test build-storybook; do
            affected=$(pnpm nx show projects --affected --target=$target)
            if [ -n "$affected" ]; then
              echo "$target" >> targets.txt
            fi
          done

          if [ -f targets.txt ]; then
            jq -R . targets.txt | jq -s . > targets.json
          fi

      - name: Upload affected targets list
        uses: actions/upload-artifact@v4
        with:
          name: affected-targets
          path: targets.json

  ci:
    name: Nx Affected (${{ matrix.target }})
    runs-on: ubuntu-24.04
    needs: setup
    timeout-minutes: 15
    strategy:
      matrix:
        target: [build, lint:nx, test, build-storybook]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: affected-targets
          path: .

      - name: Check if ${{ matrix.target }} is affected
        id: skipcheck
        run: |
          if jq -e 'index("${{ matrix.target }}")' targets.json > /dev/null; then
            echo "affected=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ No changes for ${{ matrix.target }}, skipping."
            echo "affected=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/cache@v4
        if: steps.skipcheck.outputs.affected == 'true'
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run Nx ${{ matrix.target }}
        if: steps.skipcheck.outputs.affected == 'true'
        run: pnpm nx affected --target=${{ matrix.target }} --exclude=document-drive

      - name: Mark target as failed
        if: failure() && steps.skipcheck.outputs.affected == 'true'
        run: echo "${{ matrix.target }}" >> failed-targets.txt

      - name: Upload failure info
        if: failure() && steps.skipcheck.outputs.affected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: failed-targets-${{ matrix.target }}
          path: failed-targets.txt
          if-no-files-found: ignore

  notify-discord:
    if: failure() && github.event_name != 'pull_request'
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    needs: [ci]
    steps:
      - name: Download failure data
        uses: actions/download-artifact@v4
        with:
          path: ./failure-data
        continue-on-error: true

      - name: Prepare and send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_USER_MAPPING: ${{ secrets.DISCORD_USER_MAPPING }}
        run: |
          DISCORD_USER=$(echo "$DISCORD_USER_MAPPING" | jq -r --arg GH_USER "${{ github.actor }}" '.[$GH_USER] // ""')

          MENTION_STRING=""
          if [ ! -z "$DISCORD_USER" ]; then
            MENTION_STRING="<@${DISCORD_USER}> "
          fi

          FAILED_TARGETS=$(cat failure-data/* 2>/dev/null | sort | uniq | paste -sd ', ' -)

          curl -H "Content-Type: application/json" -X POST "$DISCORD_WEBHOOK" -d '{
            "embeds": [{
              "title": "⚠️ Job Failed",
              "description": "**Author:** '"${MENTION_STRING}"'\n**Commit:** [`${{ github.event.head_commit.message }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) \n**Failed targets:** [`'"$FAILED_TARGETS"'`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
              "color": 16711680
            }]
          }'
