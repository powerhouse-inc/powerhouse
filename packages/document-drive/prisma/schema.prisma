// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Drive {
  slug String @id
  id   String
}

model Document {
  id                  String
  driveId             String
  created             DateTime             @default(now())
  lastModified        DateTime             @default(now())
  name                String?
  initialState        String // json object with the scope as keys of the root object
  documentType        String
  synchronizationUnits SynchronizationUnit[]

  @@id([id, driveId])
  @@index(driveId)
}

model SynchronizationUnit {
  id           String      @unique @default(uuid())
  syncId       String
  driveId      String
  documentId   String
  Document     Document    @relation(fields: [documentId, driveId], references: [id, driveId], onDelete: Cascade)
  scope        String
  branch       String
  operations   Operation[]
  version      Int         @default(0)
  revision      Int         @default(-1)
  lastModified DateTime    @default(now())

  @@unique([driveId, syncId])
  @@unique([driveId, documentId, scope, branch])
  @@index([driveId, documentId, scope, branch, revision])
}

model Operation {
  id                 String             @id @default(uuid())
  driveId            String
  documentId         String
  scope              String
  branch             String
  SynchronizationUnit SynchronizationUnit @relation(fields: [driveId, documentId, scope, branch], references: [driveId, documentId, scope, branch], onDelete: Cascade)
  opId               String?
  index              Int
  skip               Int
  hash               String
  timestamp          DateTime
  input              String
  type               String
  attachments        Attachment[]
  clipboard          Boolean?           @default(false)
  context            Json?
  resultingState     Bytes?

  @@unique([driveId, documentId, scope, branch, index(sort: Desc)])
}

model Attachment {
  id          String    @id @default(uuid())
  operationId String
  Operation   Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  mimeType  String
  data      String
  filename  String?
  extension String?
  hash      String
}

model Listener {
  listenerId String @id @default(uuid())
  driveId    String

  label  String?
  block  Boolean
  system Boolean

  filter   Json
  callInfo Json
}
