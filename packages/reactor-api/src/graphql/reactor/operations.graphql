# Fragment for common PHDocument fields
fragment PHDocumentFields on PHDocument {
  id
  slug
  name
  documentType
  state
  revision
  created
  lastModified
  parentId
}

# Query operations
query GetDocumentModels($namespace: String, $paging: PagingInput) {
  documentModels(namespace: $namespace, paging: $paging) {
    items {
      id
      name
      namespace
      version
      specification
    }
    totalCount
    hasNextPage
    hasPreviousPage
    cursor
  }
}

query GetDocument($identifier: String!, $view: ViewFilterInput) {
  document(identifier: $identifier, view: $view) {
    document {
      ...PHDocumentFields
    }
    childIds
  }
}

query GetDocumentChildren(
  $parentIdentifier: String!
  $view: ViewFilterInput
  $paging: PagingInput
) {
  documentChildren(
    parentIdentifier: $parentIdentifier
    view: $view
    paging: $paging
  ) {
    items {
      ...PHDocumentFields
    }
    totalCount
    hasNextPage
    hasPreviousPage
    cursor
  }
}

query GetDocumentParents(
  $childIdentifier: String!
  $view: ViewFilterInput
  $paging: PagingInput
) {
  documentParents(
    childIdentifier: $childIdentifier
    view: $view
    paging: $paging
  ) {
    items {
      ...PHDocumentFields
    }
    totalCount
    hasNextPage
    hasPreviousPage
    cursor
  }
}

query FindDocuments(
  $search: SearchFilterInput!
  $view: ViewFilterInput
  $paging: PagingInput
) {
  findDocuments(search: $search, view: $view, paging: $paging) {
    items {
      ...PHDocumentFields
    }
    totalCount
    hasNextPage
    hasPreviousPage
    cursor
  }
}

query GetJobStatus($jobId: String!) {
  jobStatus(jobId: $jobId) {
    id
    status
    result
    error
    createdAt
    completedAt
  }
}

# Mutation operations
mutation CreateDocument($document: JSONObject!, $parentIdentifier: String) {
  createDocument(document: $document, parentIdentifier: $parentIdentifier) {
    ...PHDocumentFields
  }
}

mutation CreateEmptyDocument(
  $documentType: String!
  $parentIdentifier: String
) {
  createEmptyDocument(
    documentType: $documentType
    parentIdentifier: $parentIdentifier
  ) {
    ...PHDocumentFields
  }
}

mutation MutateDocument(
  $documentIdentifier: String!
  $actions: [JSONObject!]!
  $view: ViewFilterInput
) {
  mutateDocument(
    documentIdentifier: $documentIdentifier
    actions: $actions
    view: $view
  ) {
    ...PHDocumentFields
  }
}

mutation MutateDocumentAsync(
  $documentIdentifier: String!
  $actions: [JSONObject!]!
  $view: ViewFilterInput
) {
  mutateDocumentAsync(
    documentIdentifier: $documentIdentifier
    actions: $actions
    view: $view
  )
}

mutation RenameDocument(
  $documentIdentifier: String!
  $name: String!
  $view: ViewFilterInput
) {
  renameDocument(
    documentIdentifier: $documentIdentifier
    name: $name
    view: $view
  ) {
    ...PHDocumentFields
  }
}

mutation AddChildren(
  $parentIdentifier: String!
  $documentIdentifiers: [String!]!
  $view: ViewFilterInput
) {
  addChildren(
    parentIdentifier: $parentIdentifier
    documentIdentifiers: $documentIdentifiers
    view: $view
  ) {
    ...PHDocumentFields
  }
}

mutation RemoveChildren(
  $parentIdentifier: String!
  $documentIdentifiers: [String!]!
  $view: ViewFilterInput
) {
  removeChildren(
    parentIdentifier: $parentIdentifier
    documentIdentifiers: $documentIdentifiers
    view: $view
  ) {
    ...PHDocumentFields
  }
}

mutation MoveChildren(
  $sourceParentIdentifier: String!
  $targetParentIdentifier: String!
  $documentIdentifiers: [String!]!
  $view: ViewFilterInput
) {
  moveChildren(
    sourceParentIdentifier: $sourceParentIdentifier
    targetParentIdentifier: $targetParentIdentifier
    documentIdentifiers: $documentIdentifiers
    view: $view
  ) {
    source {
      ...PHDocumentFields
    }
    target {
      ...PHDocumentFields
    }
  }
}

mutation DeleteDocument($identifier: String!, $propagate: PropagationMode) {
  deleteDocument(identifier: $identifier, propagate: $propagate)
}

mutation DeleteDocuments(
  $identifiers: [String!]!
  $propagate: PropagationMode
) {
  deleteDocuments(identifiers: $identifiers, propagate: $propagate)
}

# Subscription operations
subscription DocumentChanges(
  $search: SearchFilterInput!
  $view: ViewFilterInput
) {
  documentChanges(search: $search, view: $view) {
    type
    documents {
      ...PHDocumentFields
    }
    context {
      parentId
      childId
    }
  }
}

subscription JobChanges($jobId: String!) {
  jobChanges(jobId: $jobId) {
    jobId
    status
    result
    error
  }
}
