import { DocumentModelStateSchema } from "./src/document-model/gen/schema/zod.js";

export { applyMixins, BaseDocumentClass } from "#document";
export type {
  Action,
  ActionContext,
  ActionErrorCallback,
  ActionSigner,
  ActionWithAttachment,
  App,
  AttachmentInput,
  BaseDocument,
  BaseState,
  BaseStateFromDocument,
  CreateChildDocumentInput,
  CreateDocument,
  CreateState,
  DocumentModelLib,
  DocumentModelModule,
  DocumentModelUtils,
  DocumentOperations,
  EditorDispatch,
  EditorModule,
  EditorProps,
  FileRegistry,
  GlobalStateFromDocument,
  ImportScriptModule,
  LoadFromFile,
  LoadFromInput,
  LocalStateFromDocument,
  Manifest,
  Operation,
  ActionSignatureContext as OperationSignatureContext,
  PartialState,
  PHAuthState,
  PHBaseState,
  PHDocument,
  PHDocumentHeader,
  PHDocumentMeta,
  PHDocumentSignatureInfo,
  PHDocumentState,
  PHReducer,
  Reducer,
  ReducerOptions,
  SaveToFile,
  SaveToFileHandle,
  Signal,
  SignalDispatch,
  SignalResult,
  Signature,
  StateReducer,
  SubgraphModule,
  User,
  ValidationError,
} from "#document";
export {
  addModule,
  addOperation,
  addOperationError,
  deleteModule,
  deleteOperation,
  deleteOperationError,
  loadFromFile as documentModelLoadFromFile,
  reducer as documentModelReducer,
  setAuthorName,
  setAuthorWebsite,
  setInitialState,
  setModelDescription,
  setModelExtension,
  setModelId,
  setModelName,
  setModuleName,
  setOperationDescription,
  setOperationErrorName,
  setOperationName,
  setOperationSchema,
  setStateSchema,
} from "#document-model";
export type {
  Author,
  DocumentModelAction,
  DocumentModelDocument,
  DocumentModelInput,
  DocumentModelLocalState,
  DocumentModelState,
  DocumentSpecification,
  Module,
  Scalars,
  ScopeState,
} from "#document-model";
export {
  attachBranch,
  baseCreateDocument,
  baseLoadFromFile,
  baseLoadFromInput,
  baseSaveToFile,
  baseSaveToFileHandle,
  buildOperationSignature,
  buildOperationSignatureMessage,
  buildSignedAction,
  createAction,
  createUnsignedHeader as createPresignedHeader,
  createReducer,
  createZip,
  garbageCollect,
  garbageCollectDocumentOperations,
  generateId,
  groupOperationsByScope,
  hashDocumentStateForScope,
  isDocumentAction,
  merge,
  precedes,
  removeExistingOperations,
  replayDocument,
  reshuffleByTimestamp,
  skipHeaderOperations,
  sortOperations,
  validateHeader,
} from "#utils";

export {
  actionContext,
  actions,
  createAuthState,
  createBaseState,
  createDocumentState,
  defaultAuthState,
  defaultBaseState,
  defaultDocumentState,
  loadState,
  noop,
  prune,
  redo,
  setName,
  undo,
} from "#document";
export type { EditorContext } from "#document";
export {
  createDocument,
  createState,
  documentModelDocumentModelModule,
  validateInitialState,
  validateModule,
  validateModuleOperation,
  validateModules,
  validateStateSchemaName,
} from "#document-model";
export type {
  OperationError as DocumentModelOperationError,
  InputMaybe,
  Maybe,
  OperationError,
} from "#document-model";
export { DocumentModelStateSchema };
