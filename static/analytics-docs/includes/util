<h1 id='utilities'>Utilities</h1>
<p>This section describes various utility objects.</p>
<h2 id='sqlquerylogger-and-sqlresultslogger'>SqlQueryLogger and SqlResultsLogger</h2>
<p>The <code>SqlQueryLogger</code> type defines a synchronous interface for logging out SQL queries, while <code>SqlResultsLogger</code> provides the same for raw query results. These can be very useful for debugging or understanding what queries are actually generated from top level Typescript objects.</p>

<p>These types are used frequently in multiple <code>IAnalyticsStore</code> implementations, such as <code>KnexAnalyticsStore</code>, <code>PostgresAnalyticStore</code>, <code>MemoryAnalyticsStore</code>, and <code>BrowserAnalyticsStore</code>. Generally, they are optional inputs into the constructor options object.</p>

<blockquote>
<p>Create your own query logger.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">queryLogger</span> <span class="o">=</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">query</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`[Q:</span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nx">query</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MemoryAnalyticsStore</span><span class="p">({</span> <span class="nx">queryLogger</span> <span class="p">});</span>
</code></pre></div>
<blockquote>
<p>You may also create a results logger. Since queries are asynchronous operations, indices match between query and results functions.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">queryLogger</span> <span class="o">=</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">query</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`[Q:</span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nx">query</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">resultsLogger</span> <span class="o">=</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`[R:</span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">results</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MemoryAnalyticsStore</span><span class="p">({</span> <span class="nx">queryLogger</span><span class="p">,</span> <span class="nx">resultsLogger</span> <span class="p">});</span>
</code></pre></div>
<p>More commonly, you can use the included utility functions, <code>defaultQueryLogger</code> and <code>defaultResultsLogger</code>. These functions append a tag to each log.</p>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MemoryAnalyticsStore</span><span class="p">({</span>
  <span class="na">queryLogger</span><span class="p">:</span> <span class="nx">defaultQueryLogger</span><span class="p">(</span><span class="dl">"</span><span class="s2">memory</span><span class="dl">"</span><span class="p">),</span>
  <span class="na">resultsLogger</span><span class="p">:</span> <span class="nx">defaultResultsLogger</span><span class="p">(</span><span class="dl">"</span><span class="s2">memory</span><span class="dl">"</span><span class="p">),</span>
<span class="p">});</span>
</code></pre></div><h2 id='ianalyticsprofiler'>IAnalyticsProfiler</h2>
<p>The Powerhouse Analytics Engine includes a simple profiling interface, <code>IAnalyticsProfiler</code>, that is consumed by each <code>IAnalyticsStore</code> implementation. A default implementation, <code>AnalyticsProfiler</code> is provided as part of the <code>@powerhousedao/analytics-engine-core</code> package.</p>

<p>The <code>AnalyticsProfiler</code> requires a namespace and a logger.</p>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">profiler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnalyticsProfiler</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">my-system</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">(</span><span class="nx">metricName</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">ms</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`[</span><span class="p">${</span><span class="nx">metricName</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">ms</span><span class="p">)}</span><span class="s2"> ms`</span><span class="p">));</span>
</code></pre></div>
<blockquote>
<p>This object may be passed in through the constructor.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="c1">// pass this object in to profile the memory store</span>
<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MemoryAnalyticsStore</span><span class="p">({</span> <span class="nx">profiler</span> <span class="p">});</span>
</code></pre></div><h3 id='record'>Record</h3>
<p>The <code>record</code> method accepts a metric name and an asynchronous function to time. It returns the value returned by the asynchronous method.</p>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">profiler</span><span class="p">.</span><span class="nx">record</span><span class="p">(</span><span class="dl">"</span><span class="s2">compute</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// elided</span>
<span class="p">});</span>
</code></pre></div><h3 id='recordsync'>RecordSync</h3>
<p>A synchronous version is also included.</p>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">profiler</span><span class="p">.</span><span class="nx">recordSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">computeSync</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// elided</span>
<span class="p">});</span>
</code></pre></div><h3 id='name-stack'>Name Stack</h3>
<p>Often, it is useful to group metrics together. This is accomplished through a metric naming stack, which takes the form: <code>[Namespace].[... Stack Values].[Metric Name]</code>. This allows systems to pass down a profiler instance, and compose results.</p>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="c1">// Blocks, { }, are a good convention to signal stack depth.</span>
<span class="nx">profiler</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">system</span><span class="dl">"</span><span class="p">);</span>
<span class="p">{</span>
  <span class="nx">profiler</span><span class="p">.</span><span class="nx">recordSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="nx">myFuncA</span><span class="p">);</span>    <span class="c1">// my-system.system.a</span>

  <span class="nx">profiler</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">subsystem</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">{</span>
    <span class="nx">profiler</span><span class="p">.</span><span class="nx">recordSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="nx">myFuncB</span><span class="p">);</span>  <span class="c1">// my-system.system.subsystem.b</span>
  <span class="p">}</span>
  <span class="nx">profiler</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>

  <span class="nx">profiler</span><span class="p">.</span><span class="nx">recordSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">,</span> <span class="nx">myFuncC</span><span class="p">);</span>    <span class="c1">// my-system.system.c</span>
<span class="p">}</span>
<span class="nx">profiler</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>

<span class="nx">profiler</span><span class="p">.</span><span class="nx">recordSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span> <span class="nx">myFuncC</span><span class="p">);</span>      <span class="c1">// my-system.c</span>
</code></pre></div>