<h1 id='postgres'>Postgres</h1>
<p>The <code>PostgresAnalyticsStore</code> is an <code>IAnalyticsStore</code> implementation that leverages a Postgres database. It requires some APIs that do not run in a browser, and is intended for server-side applications.</p>

<aside class="notice">
See the <a href="#compatibility">Compatibility</a> section for details on which stores are intended to be used in different execution environments.
</aside>
<h2 id='construction'>Construction</h2>
<p>The <code>PostgresAnalyticsStore</code> uses the <a href="https://www.npmjs.com/package/pg"><code>pg</code></a> package and requires Postgres connection information.</p>

<p>By providing a PG connection string, the store will automatically create a <code>pg</code> instance, internally.</p>

<p>A docker-compose file is provided <a href="https://github.com/powerhouse-inc/analytics-engine/blob/main/pg/docker-compose.test.yml">here</a> that will spin up an instance quickly. Note that it cannot be copy/pasted but must be run in the checked out repository to access the correct initialization scripts. See the <a href="https://github.com/powerhouse-inc/analytics-engine/tree/main?tab=readme-ov-file#pg">developer documentation</a> for more information.</p>

<blockquote>
<p>Create with only a connection string.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="c1">// connects to a local postgres instance, configured by the provided docker-compose file</span>
<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PostgresAnalyticsStore</span><span class="p">({</span>
  <span class="na">connectionString</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgresql://postgres:password@localhost:5555/analytics</span><span class="dl">"</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div>
<blockquote>
<p>Instead, create with a <code>knex</code> object.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="k">import</span> <span class="nx">knexFactory</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">knex</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">knex</span> <span class="o">=</span> <span class="nx">knexFactory</span><span class="p">({</span>
  <span class="na">client</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pg</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">connection</span><span class="p">:</span> <span class="dl">"</span><span class="s2">...</span><span class="dl">"</span><span class="p">,</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PostgresAnalyticsStore</span><span class="p">({</span>
  <span class="nx">knex</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div>
<blockquote>
<p>The <code>PostgresAnalyticsStore</code> may also be created with optional contructor arguments that may be helpful for debugging or metrics collection.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PostgresAnalyticsStore</span><span class="p">({</span>
  <span class="na">queryLogger</span><span class="p">:</span> <span class="nx">querydefaultQueryLogger</span><span class="p">(</span><span class="dl">"</span><span class="s2">memory</span><span class="dl">"</span><span class="p">),</span>
  <span class="na">resultsLogger</span><span class="p">:</span> <span class="nx">defaultResultsLogger</span><span class="p">(</span><span class="dl">"</span><span class="s2">memory</span><span class="dl">"</span><span class="p">),</span>
  <span class="na">profiler</span><span class="p">:</span> <span class="k">new</span> <span class="nx">PassthroughAnalyticsProfiler</span><span class="p">(),</span>
<span class="p">});</span>
</code></pre></div>
<p>For more details on these optional constructor parameters, see the <a href="#utilities">Utilities</a> section.</p>
<h2 id='raw-queries'>Raw Queries</h2>
<p>Though there is no method on <code>IAnalyticsStore</code> for running arbitrary queries, the <code>PostgresAnalyticsStore</code> implementation provides a <code>raw(sql: string)</code> method. This is used only in development, testing, and <a href="https://github.com/powerhouse-inc/analytics-engine/blob/main/benchmarks/src/wasm.ts">benchmarking</a> situations and is not intended for production use cases.</p>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">raw</span><span class="p">(</span><span class="s2">`select distinct unit from "AnalyticsSeries"`</span><span class="p">);</span>
</code></pre></div>