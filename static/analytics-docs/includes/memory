<h1 id='memory'>Memory</h1>
<p>The <code>MemoryAnalyticsStore</code> is an <code>IAnalyticsStore</code> implementation that uses a an in-memory database as its storage mechanism. Under the hood, we load a WASM build of Postgres, called <a href="https://pglite.dev/">PGlite</a>.</p>

<aside class="notice">
See the <a href="#compatibility">Compatibility</a> section for details on which stores are intended to be used in different execution environments.
</aside>
<h2 id='construction'>Construction</h2>
<p>The <code>MemoryAnalyticsStore</code> is simple to create.</p>

<blockquote>
<p>Create with no arguments.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MemoryAnalyticsStore</span><span class="p">();</span>
</code></pre></div>
<blockquote>
<p>The <code>MemoryAnalyticsStore</code> may also be created with optional contructor arguments that may be helpful for debugging or metrics collection.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MemoryAnalyticsStore</span><span class="p">({</span>
  <span class="na">queryLogger</span><span class="p">:</span> <span class="nx">querydefaultQueryLogger</span><span class="p">(</span><span class="dl">"</span><span class="s2">memory</span><span class="dl">"</span><span class="p">),</span>
  <span class="na">resultsLogger</span><span class="p">:</span> <span class="nx">defaultResultsLogger</span><span class="p">(</span><span class="dl">"</span><span class="s2">memory</span><span class="dl">"</span><span class="p">),</span>
  <span class="na">profiler</span><span class="p">:</span> <span class="k">new</span> <span class="nx">PassthroughAnalyticsProfiler</span><span class="p">(),</span>
<span class="p">});</span>
</code></pre></div>
<p>For more details on these optional constructor parameters, see the <a href="#utilities">Utilities</a> section.</p>

<blockquote>
<p>Additionally, both <code>knex</code> and <code>pglite</code> objects may be passed in. This is helpful in contexts where multiple objects are sharing the same database.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="c1">// knex must be created with these options</span>
<span class="kd">const</span> <span class="nx">knex</span> <span class="o">=</span> <span class="nx">knexFactory</span><span class="p">({</span> <span class="na">client</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pg</span><span class="dl">"</span><span class="p">,</span> <span class="na">useNullAsDefault</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>

<span class="c1">// create your own Pglite instance and pass it in</span>
<span class="c1">// See (https://github.com/electric-sql/pglite/blob/main/packages/pglite/src/interface.ts) for full list of options.</span>
<span class="kd">const</span> <span class="nx">pgLiteFactory</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">PGlite</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="na">debug</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
  <span class="na">relaxedDurability</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MemoryAnalyticsStore</span><span class="p">({</span>
  <span class="nx">knex</span><span class="p">,</span>
  <span class="nx">pgLiteFactory</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div><h2 id='initialization'>Initialization</h2>
<p>While easy to use, the <code>MemoryAnalyticsStore</code> requires an asynchronous initialization step. This is for two reasons.</p>

<p>In cases where the <code>MemoryAnalyticsStore</code> was not provided a <code>PGlite</code> instance, it needs time to download and initialize the WASM build.</p>

<p>Additionally, it also needs to initialize the database schema of the in-memory database. This is distinct from the <a href="#postgres">Postgres implementation</a>, which assumes a fully-initialized Postgres database already exists. The initialization is idempotent, so tables already created will not be recreated.</p>

<p>The full SQL query used can be found in the <a href="https://github.com/powerhouse-inc/analytics-engine/blob/main/browser/src/MemoryAnalyticsStore.ts"><code>MemoryAnalyticsStore</code> source</a>.</p>

<blockquote>
<p>Note that this method is not available on the <code>IAnalyticsStore</code> interface, but only on the <code>MemoryAnalyticsStore</code> type.</p>
</blockquote>
<div class="highlight"><pre class="highlight typescript tab-typescript"><code><span class="c1">// create the store</span>
<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MemoryAnalyticsStore</span><span class="p">();</span>

<span class="c1">// initialize it</span>
<span class="k">await</span> <span class="nx">store</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</code></pre></div>