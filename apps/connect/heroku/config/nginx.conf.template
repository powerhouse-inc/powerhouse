worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Brotli compression
    brotli on;
    brotli_comp_level 6;
    brotli_types text/plain text/css application/javascript application/json image/svg+xml application/xml+rss image/avif;
    brotli_static on;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/javascript application/json image/svg+xml application/xml+rss image/avif;

    server {
        listen 0.0.0.0:${PORT};
        server_name _;
        root /app/dist;

        location ${PH_CONNECT_BASE_PATH}assets/ {
            alias /app/dist/assets/;
            access_log off;
            log_not_found off;
            etag off;
            expires max;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        location = ${PH_CONNECT_BASE_PATH}service-worker.js {
            alias /app/dist/service-worker.js;

            access_log off;
            log_not_found off;
            etag off;

            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # match any file in the root folder, except index.html
        location ~ ${PH_CONNECT_BASE_PATH}(?!index\.html$)([^/]+\.[a-z0-9]+)$ {
            alias /app/dist/$1;
            access_log off;
            log_not_found off;
            etag on;
            add_header Cache-Control "public, must-revalidate";
        }

        location ${PH_CONNECT_BASE_PATH} {
            try_files $uri $uri/ ${PH_CONNECT_BASE_PATH}index.html;
        }

        location = ${PH_CONNECT_BASE_PATH}index.html {
            alias /app/dist/index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Catch-all: redirect to base path only if base path is not /
        location / {
            # Use X-Forwarded-Proto from Heroku to preserve https
            set $redirect_scheme $scheme;
            if ($http_x_forwarded_proto = 'https') {
                set $redirect_scheme https;
            }

            if ($request_uri !~ ^${PH_CONNECT_BASE_PATH}) {
                return 301 $redirect_scheme://$host${PH_CONNECT_BASE_PATH};
            }
            return 404;
        }
    }
}
